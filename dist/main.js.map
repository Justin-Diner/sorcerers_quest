{"version":3,"file":"main.js","mappings":"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","sources":["webpack://sorcerers_quest/./src/scripts/sorcerer.js","webpack://sorcerers_quest/./src/scripts/health_bar.js","webpack://sorcerers_quest/./src/scripts/castle.js","webpack://sorcerers_quest/./src/scripts/animated_object.js","webpack://sorcerers_quest/./src/scripts/fire_arrow.js","webpack://sorcerers_quest/./src/scripts/camera.js","webpack://sorcerers_quest/./src/scripts/game.js","webpack://sorcerers_quest/./src/scripts/still_object.js","webpack://sorcerers_quest/./src/index.js"],"sourcesContent":["import HealthBar from \"./health_bar\";\n\n// Idle Animations \nconst sorcererRightIdle = new Image();\nsorcererRightIdle.src = './assets/sorcerer/Idle.png'\nconst sorcererLeftIdle = new Image();\nsorcererLeftIdle.src = './assets/sorcerer/idle_left.png'\n\n// Run Animations\nconst sorcererRunRight = new Image();\nsorcererRunRight.src = './assets/sorcerer/Run.png'\nconst sorcererRunLeft = new Image(); \nsorcererRunLeft.src = './assets/sorcerer/sorcerer_run_left.png'\nlet leftFrames = {}\n\n// Jumping Animations\nconst sorcererJump = new Image();\nsorcererJump.src = './assets/sorcerer/Jump.png'\n\n//Jumping Left \nconst leftSorcererJump = new Image();\nleftSorcererJump.src = './assets/sorcerer/leftJump.png';\n\n// Casting \nconst sorcererCast = new Image();\nsorcererCast.src = './assets/sorcerer/Attack1.png'\n\n// Explosion\nconst explosionOne = new Image();\nexplosionOne.src = './assets/explosion/Explosion1_long.png'\n\n// Animation Variables \nlet frame = 0;\nlet gameFrame = 0;\nconst slowDownAnimationRate = 5;\nlet idleFrameSize = 5;\nlet runFrameSize = 7;\nlet jumpingFrameSize = 1;\nlet frameSize = 0;\nlet casting = true;\nlet oneLoopFrame = 0;\nlet castLoopCounter = 0;\nlet explosionLoopCounter = 0;\n\nconst SORCERER_WIDTH = 231\nconst SORCERER_HEIGHT = 164\nconst GRAVITY = 0.4;\n\nexport default class Sorcerer {\n\tconstructor(position) {\n\t\tthis.position = position;\n\t\tthis.velocity = {\n\t\t\tx: 0, \n\t\t\ty: 1\n\t\t}\n\t\tthis.status = \"idle\"\n\t\tthis.direction = \"right\";\n\t\tthis.hitbox = {\n\t\t\tposition: {\n\t\t\t\tx: this.position.x, \n\t\t\t\ty: this.position.y\n\t\t\t}, \n\t\t\twidth: 69, \n\t\t\theight: 100\n\t\t}\n\n\t\t// Sorcerer Health\n\t\tthis.health = 30;\n\t\tthis.healthBar = new HealthBar({position: \n\t\t\t{\n\t\t\tx: 54, \n\t\t\ty: 14\n\t\t\t},\n\t\t\tvalue: 30,\n\t\t\ttextPosition: 160\n\t\t})\n\n\n\t\tthis.camerabox = {\n\t\t\tposition: {\n\t\t\t\tx: this.position.x, \n\t\t\t\ty: this.position.y\n\t\t\t},\n\t\t\twidth: 150, \n\t\t\theight: 100\n\t\t}\n\n\t}\n\n\thitboxDims() {\n\t\treturn {\n\t\t\ttopLeft: [this.hitbox.position.x, this.hitbox.position.y],\n\t\t\ttopRight: [this.hitbox.position.x + this.hitbox.width, this.hitbox.position.y],\n\t\t\tbottomLeft: [this.hitbox.position.x, this.hitbox.position.y + this.hitbox.height],\n\t\t\tbottomRight: [this.hitbox.position.x + this.hitbox.width, this.hitbox.position.y + this.hitbox.height]\n\t\t}\t\n\t}\n\n\n\tdraw(ctx) {\n\t\tlet currentAnimation = sorcererRightIdle;\n\n\t\tif (this.direction === \"right\" && this.status == \"idle\") {\n\t\t\tcurrentAnimation = sorcererRightIdle;\n\t\t\tframeSize = idleFrameSize;\n\t\t} else if (this.direction === \"left\" && this.status === \"idle\") {\n\t\t\tcurrentAnimation = sorcererLeftIdle;\n\t\t\tframeSize = idleFrameSize;\n\t\t\tleftFrames = {\n\t\t\t\t0: 5, \n\t\t\t\t1: 4, \n\t\t\t\t2: 3,\n\t\t\t\t3: 2, \n\t\t\t\t4: 1, \n\t\t\t\t5: 0 \n\t\t\t}\n\t\t} else if (this.direction === \"left\" && this.status === \"moving\") {\n\t\t\tcurrentAnimation = sorcererRunLeft;\n\t\t\trunFrameSize;\n\t\t\tleftFrames = {\n\t\t\t\t0: 7, \n\t\t\t\t1: 6, \n\t\t\t\t2: 5, \n\t\t\t\t3: 4,\n\t\t\t\t4: 3, \n\t\t\t\t5: 2,\n\t\t\t\t6: 1, \n\t\t\t\t7: 0\n\t\t\t}\n\t\t} else if (this.direction === \"right\" && this.status === \"moving\") {\n\t\t\tcurrentAnimation = sorcererRunRight;\n\t\t\trunFrameSize;\n\t\t} else if (this.direction === \"right\" && this.status === \"jumping\") {\n\t\t\tcurrentAnimation = sorcererJump;\n\t\t\tframeSize = jumpingFrameSize;\n\t\t} else if (this.direction === \"left\" && this.status === \"jumping\") {\n\t\t\tcurrentAnimation = leftSorcererJump;\n\t\t\tframeSize = jumpingFrameSize;\n\t\t\tleftFrames = {\n\t\t\t\t0:1, \n\t\t\t\t1:0\n\t\t\t}\n\t\t} else if (this.direction === \"right\" && this.status === \"casting\") {\n\t\t\tcurrentAnimation = sorcererCast;\n\t\t\tframeSize = 7;\n\t\t}\n\t\t\n\t\t// Chooses the frame based on cycles of the animation loop. Increases every 5 frames. Once Math.floor hits 1, it increments. Example (0.2, 0.4, 0.6, 0.8, 1.0, etc.)\n\t\t// Draws the Sorcerer with the above frame in line 2\n\t\t// ctx.drawImage(image, sx,sy,sw, sh, dx, dy, dw, dh)\n\t\tif (this.status === \"casting\" && casting === true) {\n\t\t\tthis.oneCast(ctx, sorcererCast);\n\t\t\tthis.explosion(ctx, explosionOne)\n\t\t} else if(this.direction === \"right\") {\n\t\t\tframe = Math.floor(gameFrame/slowDownAnimationRate) % frameSize;\n\t\t\tctx.drawImage(currentAnimation, frame * SORCERER_WIDTH, 56, SORCERER_WIDTH, SORCERER_HEIGHT, this.position.x, this.position.y, 231, 190)\n\t\t} else if (this.direction === \"left\") {\n\t\t\tframe = leftFrames[Math.floor(gameFrame/slowDownAnimationRate) % frameSize];\n\t\t\tctx.drawImage(currentAnimation, frame * SORCERER_WIDTH, 56, SORCERER_WIDTH, SORCERER_HEIGHT, this.position.x, this.position.y, 231, 190)\n\t\t}\n\t\t// Gravity \n\t\tthis.update(); \n\t\tthis.updateHitBox();\n\t\t//this.updateCameraBox();\n\t\t\n\n\t\t//ctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\n\t\t//ctx.fillRect(\n\t\t//\tthis.camerabox.position.x, \n\t\t//\tthis.camerabox.position.y, \n\t\t//\tthis.camerabox.width + 60, \n\t\t//\tthis.camerabox.height)\n\n\t\t//ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n\t\t//ctx.fillRect(this.hitbox.position.x, this.hitbox.position.y, this.hitbox.width, this.hitbox.height)\n\t\tgameFrame++;\n\t}\n\n\tupdate() {\n\t\t// Gravity (continuously adds over time)\n\t\tthis.position.x += this.velocity.x;\n\t\tthis.position.y += this.velocity.y;\n\n\t\t// Ensuring he does not go past bottom of screen\n\t\t//  \ty position \t\t\t 190\t\t\t\t\t\t\t\ty = 1 \n\t\tif (this.position.y + SORCERER_HEIGHT + this.velocity.y < 576) {\n\t\t\tthis.velocity.y += GRAVITY;\n\t\t} else {\n\t\t\tthis.velocity.y = 0;\n\t\t}\n\t}\n\n\tupdateHitBox() {\n\t\tthis.hitbox = {\n\t\t\tposition: {\n\t\t\t\tx: this.position.x + 81, \n\t\t\t\ty: this.position.y\n\t\t\t}, \n\t\t\twidth: 69, \n\t\t\theight: 100\n\t\t}\n\t}\n\n\t//updateCameraBox() {\n\t//\tthis.camerabox = {\n\t//\t\tposition: {\n\t//\t\t\tx: this.position.x - 25, \n\t//\t\t\ty: this.position.y\n\t//\t\t},\n\t//\t\twidth: 250, \n\t//\t\theight: 100\n\t//\t}\n\t//}\n\n\tidle() {\n\t\tthis.status = \"idle\";\n\t}\n  \n\t// Velocity \n\tmoveRight() {\n\t\tthis.status = \"moving\";\n\t\tif (this.status !== \"jumping\") {\n\t\t\tthis.status = \"moving\"\n\t\t\tthis.direction = \"right\"\n\t\t} else {\n\t\tthis.direction = \"right\";\n\t\t}\n\t}\n\n\tmoveLeft() {\n\t\tthis.velocity.x -= 1\n\t\tif (this.status !== \"jumping\") {\n\t\t\tthis.status = \"moving\";\n\t\t\tthis.direction = \"left\";\n\t\t} else {\n\t\t\tthis.direction = \"left\";\n\t\t}\n\t}\n\n\tjump() {\n\t\tthis.velocity.y = -10\n\t\tthis.status = \"jumping\"\n\t\tsetTimeout( () => {\n\t\t\tthis.status = \"idle\"\n\t\t}, 900);\n\t}\n\n\tcast() {\n\t\t\n\t\tthis.status = \"casting\";\n\t\tthis.direction = \"right\";\n\t\tthis.velocity.x = 0;\n\t}\n\n\tdeath() {\n\n\t}\n\n\t\n\toneCast(ctx, image) {\n\t\tif (castLoopCounter <= 54) {\n\t\tframe = Math.floor(oneLoopFrame/7) % 7;\n\t\tctx.drawImage(image, frame * SORCERER_WIDTH, 0, SORCERER_WIDTH, SORCERER_HEIGHT, this.position.x, this.position.y - 64, 240, 190)\n\t\tcastLoopCounter++\n\t\toneLoopFrame++\n\t\t} else {\n\t\t\toneLoopFrame = 0;\n\t\t\tcastLoopCounter = 0;\n\t\t\tthis.idle();\n\t\t}\n\t}\n\n\texplosion(ctx, image) {\n\t\tif (explosionLoopCounter <= 150) {\n\t\t\tframe = Math.floor(oneLoopFrame/8) % 15;\n\t\t\tctx.drawImage(image, frame * (image.width / 16), 0, image.width / 14, image.height, 680, 200, 400, 300)\n\t\t\texplosionLoopCounter++\n\t\t\t} else {\n\t\t\t\texplosionLoopCounter = 0;\n\t\t\t}\n\t}\n\n}\n\n","export default class HealthBar {\n\tconstructor(options) {\n\tthis.position = options.position\n \tthis.value = options.value;\n\tthis.maxHealth = options.value;\n\tthis.backgroundColor = \"green\";\n\tthis.innerSize = 254;\n\tthis.textPosition = options.textPosition;\n\t}\n\n\tdraw(ctx) {\n\t\tctx.beginPath();\n\t\tctx.rect(this.position.x, this.position.y, 254, 24);\n\t\tctx.fillStyle = \"red\";\n\t\tctx.strokeStyle = \"black\";\n\t\tctx.stroke();\n\t\tctx.fill()\n\t\n\t\t// Inner Rect \n\t\tctx.beginPath();\n\t\tctx.rect(this.position.x, this.position.y, this.innerSize, 24);\n\t\tctx.strokeStyle = \"transparent\";\n\t\tctx.fillStyle = this.backgroundColor;\n\t\tctx.fill()\n\t\n\t\t// Text\n\t\tctx.fillStyle = \"white\";\n\t\tctx.fillText(`${this.value} / ${this.maxHealth}`, this.textPosition, 29)\n\t\tctx.stroke();\n\t\t\n\t}\n\n\tdecrease() {\n\t\tlet maxInnerSize = 254;\n\t\tif (this.value >= 1) {\n\t\tthis.value -= 10;\n\t\tthis.innerSize -= 254 / (this.maxHealth / 10);\n\t\t}\n\t}\n\n}","import HealthBar from \"./health_bar\";\n\nconst castleImg = new Image();\ncastleImg.src = './assets/castle/castle.png'\n\nexport default class Castle {\n\tconstructor(options){\n\t\tthis.position = options.position;\n\t\tthis.width = 400;\n\t\tthis.height =  600; \n\t\tthis.health = 100; \n\t\tthis.healthbar = new HealthBar({position: {\n\t\t\tx: 700, \n\t\t\ty: 14\n\t\t},\n\t\tvalue: 100,\n\t\ttextPosition: 810})\n\t}\n\n\tdraw(ctx) {\n\t\tctx.drawImage(castleImg, this.position.x, 0, this.width, this.height)\n\t}\n\n\tdrawHealthBar(ctx) {\n\t\tthis.healthbar.draw(ctx);\n\t}\n}","let currentframe = 0;\nlet animationFrame = 0;\nlet slowDownAnimationRate = 5;\n\nexport default class AnimatedObject {\n\tconstructor(options) {\n\t\tthis.image = new Image();\n\t\tthis.image.src = options.imageSrc;\n\t\tthis.amountOfFrames = options.amountOfFrames\n\t}\n\n\t// Makes the animation for the animated object. \n\t// ctx.drawImage(\n\t\t//\timage, \n\t\t//\tsx - x-axis coordinate of the top left of the image. \n\t\t//\tsy - y-axis coordinate of the top left corner of the image. \n\t\t//\tsWidth -  Width of the source image to draw. \n\t\t//\tsHeight - Height of the image to draw. \n\t\t//\tdx - x-axis coodinate to plae top left corner of source\n\t\t//\tdy - y-axis coordinate to place top-left corner of sounrce. \n\t\t//\tdWidth - The width to draw the image in the destination canvas. \n\t\t//\tdHeight - The height to draw the image in the canvas.  \n\t\t//)\n\tanimate(ctx, width, height) {\n\t\tcurrentframe = Math.floor(animationFrame/slowDownAnimationRate) % this.amountOfFrames;\n\t\tctx.drawImage(\n\t\t\tthis.image, \n\t\t\tcurrentframe * width, \n\t\t\t0, \n\t\t\twidth, \n\t\t\theight, \n\t\t\tthis.position.x, \n\t\t\tthis.position.y, \n\t\t\twidth, \n\t\t\theight\n\t\t)\n\t\t\n\t\tanimationFrame++;\n\t}\n\n}","import AnimatedObject from \"./animated_object\";\n\n// Base Dimensions of each arrow. \nconst ARROW_HEIGHT = 110;\nconst ARROW_WIDTH = 100;\n\nexport default class FireArrow extends AnimatedObject {\n\tconstructor(options) {\n\t\toptions.imageSrc = './assets/fire_arrow/fire.png'\n\t\t// Consider renaming amountOfFrames (it is in animated Object)\n\t\toptions.amountOfFrames = 29;\n\n\t\tsuper(options) // position\n\t\tthis.position = options.position\n\t\tthis.width = ARROW_WIDTH;\n\t\tthis.height = ARROW_HEIGHT;\n\n\t\tthis.velocity = {\n\t\t\tx: options.velocity.x, \n\t\t\ty: options.velocity.y\n\t\t}\n\n\t\tthis.hitbox = {\n\t\t\tposition: {\n\t\t\t\tx: this.position.x, \n\t\t\t\ty: this.position.y\n\t\t\t}, \n\t\t\twidth: 10, \n\t\t\theight: 10\n\t\t}\n\n\t\tthis.recentlyHit = false; \n\t\tthis.currentDirection = options.currentDirection;\n\t}\n\n\tdraw(ctx) {\n\t\tif (this.currentDirection === \"right\") {\n\t\t\t// Creates Right facing Arrow Shaft\n\t\t\tctx.beginPath();\n\t\t\tctx.strokeStyle = '#964B00';\n\t\t\tctx.lineWidth = 3;\n\t\t\tctx.moveTo(this.position.x + 50, this.position.y + 60);\n\t\t\tctx.lineTo(this.position.x + 100, this.position.y + 60);\n\t\t\tctx.stroke();\n\n\t\t\t// Creates Right facing arrow end\n\t\t\tctx.beginPath();\n\t\t\tctx.fillStyle = \"#5A5A5A\"\n\t\t\tctx.moveTo(this.position.x + 96, this.position.y + 60);\n\t\t\tctx.lineTo(this.position.x + 97 + 5, this.position.y + 60 + 4);\n\t\t\tctx.lineTo(this.position.x + 97 + 5, this.position.y + 60 - 4);\n\t\t\tctx.fill();\n\t\t} else {\n\t\t\t// Creates Left facing Arrow Shaft\n\t\t\tctx.beginPath();\n\t\t\tctx.strokeStyle = '#964B00';\n\t\t\tctx.lineWidth = 3;\n\t\t\tctx.moveTo(this.position.x + 50, this.position.y + 60);\n\t\t\tctx.lineTo(this.position.x -12, this.position.y + 60);\n\t\t\tctx.stroke();\n\n\t\t\t// Creates Left facing arrow end\n\t\t\tctx.beginPath();\n\t\t\tctx.fillStyle = \"#5A5A5A\"\n\t\t\tctx.moveTo(this.position.x, this.position.y + 60);\n\t\t\tctx.lineTo(this.position.x - 12, this.position.y + 60 + 4);\n\t\t\tctx.lineTo(this.position.x - 12, this.position.y + 60 - 4);\n\t\t\tctx.fill();\n\t\t}\n\n\t\t//Moves the arrow hitbox as it moves. \n\t\tthis.updateHitBox();\n\n\t\t// Increases the position in accordance with the arrows velocity. \n\t\tthis.move()\n\t\tthis.animate(ctx, this.width, this.height);\n\t}\n\n\tmove() {\n\t\tthis.position.x += this.velocity.x;\n\t\tthis.position.y += this.velocity.y;\n\t}\n\n\treset() {\n\t\tif (this.currentDirection === \"right\") {\n\t\t\t\n\t\t\tthis.position.x = 10;\n\t\t\tthis.position.y = this.generateRandomNumber(0, 501);\n\t\t\tthis.velocity.x = this.generateRandomNumber(2, 6);\n\t\t\tthis.currentDirection = \"left\";\n\t\t} else {\n\t\t\tthis.position.x = 900;\n\t\t\tthis.position.y = this.generateRandomNumber(0, 500)\n\t\t\tthis.velocity.x = this.generateRandomNumber(2, 6);\n\t\t\tthis.velocity.x = -3;\n\t\t\tthis.currentDirection = \"right\";\n\t\t}\n\t\tthis.position.y = 40; \n\t}\n\n\tupdateHitBox() {\n\t\tthis.hitbox = {\n\t\t\tposition: {\n\t\t\t\tx: this.position.x + 37, \n\t\t\t\ty: this.position.y + 57\n\t\t\t}, \n\t\t\twidth: 63, \n\t\t\theight: 6\n\t\t}\n\t}\n\n\tifHit() {\n\t\tsetTimeout( () => {\n\t\t\tthis.recentlyHit = false\n\t\t\tthis.reset();\n\t\t}, 1000)\n\t}\n\n\tgenerateRandomNumber(max, min) {\n\t\treturn Math.floor(Math.random() * (max - min + 1) + min)\n\t}\n\n}","export default class Camera {\n\tconstructor(obj) {\n\t\tthis.position = obj.position\n\t}\n}","import Sorcerer from './sorcerer';\nimport StillObject from './still_object'\nimport FireArrow from './fire_arrow';\nimport Camera from './camera'\n\nlet backgroundImage = new StillObject({\n\tposition : { x: 0, y: 0 },\n\timageSrc: './assets/background/sunnybackground.jpg'}\n);\n\nconst scaledCanvas = {\n\twidth:  1024 / 4,\n\theight: 576 / 4\n}\n\nconst acceptableKeys = {\n\td: {\n\t\tpressed: false\n\t},\n\ta: {\n\t\tpressed: false\n\t}, \n\tspace: {\n\t\tpressed: false\n\t}, \n\tc: {\n\t\tpressed: false\n\t}\n}\n\nlet cLocked = false;\n\nfunction randomShootingPosition() {\n\tlet spawnHeight = Math.floor(576 / 3)\n\tlet spawnWidth = 1024\n\tlet xPosition = spawnWidth * Math.random();\n\tlet yPosition = spawnHeight * Math.random()\n\tlet arrowDirection; \n\tlet velocity = {\n\t\tx: 0, \n\t\ty: 0\n\t};\n\n\tif (xPosition < 512) {\n\t\tarrowDirection = \"left\";\n\t} else {\n\t\tarrowDirection = \"right\";\n\t}\n\n\tif (arrowDirection = \"left\") {\n\t\tvelocity.x = 3;\n\t} else {\n\t\tvelocity.x = -3;\n\t}\n\n\treturn { position: {\n\t\tx: xPosition,\n\t\ty: yPosition\n\t\t},\n\t\tcurrentDirection : arrowDirection, \n\t\tvelocity : {\n\t\t\tx: velocity.x,\n\t\t\ty: velocity.y\n\t\t}\n\t}\n}\n\nexport default class Game {\n\tconstructor(sorcerer, castle) {\n\t\tthis.sorcerer = sorcerer;\n\t\tthis.castle = castle;\n\t\tthis.inGameArrows = [];\n\t\tthis.camera = new Camera({\n\t\t\tposition: {\n\t\t\t\tx: this.sorcerer.position.x, \n\t\t\t\ty: this.sorcerer.position.y\n\t\t\t}}\n\t\t),\n\t\tthis.gameStarted = true;\n\n\t\twindow.addEventListener(\"keydown\", (e) => {\n\t\t\tif (e.key === \"d\") {\n\t\t\t\tacceptableKeys.d.pressed = true; \n\t\t\t\tsorcerer.moveRight();\n\t\t\t} else if (e.key === \"a\") {\n\t\t\t\tacceptableKeys.a.pressed = true; \n\t\t\t\tsorcerer.moveLeft();\n\t\t\t} else if (e.key === \" \") {\n\t\t\t\tacceptableKeys.space.pressed = true; \n\t\t\t\tsorcerer.jump();\n\t\t\t} else if (e.key === \"c\" && !(cLocked)) {\n\t\t\t\tthis.lockC();\n\t\t\t\tsorcerer.cast();\n\t\t\t\t\n\t\t\t\tthis.castle.health -=10\n\t\t\t\tthis.castle.healthbar.decrease();\n\t\t\t}\n\t\t})\n\n\t\twindow.addEventListener(\"keyup\", (e) => {\n\t\t\tif (e.key === \"d\") {\n\t\t\t\tacceptableKeys.d.pressed = false; \n\t\t\t\tthis.sorcerer.status = \"idle\";\n\t\t\t} else if (e.key === \"a\") {\n\t\t\t\tacceptableKeys.a.pressed = false; \n\t\t\t\tthis.sorcerer.status = \"idle\";\n\t\t\t} else if (e.key === \" \") {\n\t\t\t\tacceptableKeys.space.pressed = false; \n\t\t\t} else if (e.key === \"c\") {\n\t\t\t\tacceptableKeys.c.pressed = false;\n\t\t\t}\n\t\t})\n\n\t\twindow.addEventListener('keydown', function(e) {\n\t\t\tif(e.key == \" \" && e.target == document.body) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t});\n\t}\n\n\tstart(ctx) {\n\t\tctx.fillStyle = \"gray\"; // Turns the fillstyle to Gray\n\t\tctx.fillRect(0, 30, canvas.width, canvas.height); // Filling the canvas background on start. \n\n\t\t// Background (scaled to bottom left)\n\t\tctx.save(); // image is 688 x 432\n\t\tctx.scale(4, 4) // Enlarges by 4 times on x and y axis\n\t\tctx.translate(this.camera.position.x, -backgroundImage.image.height + scaledCanvas.height)\n\t\tbackgroundImage.draw(ctx);\n\t\tctx.restore();\n\n\t\t// Initial Arrows\n\t\tlet initialArrowOne = new FireArrow({\n\t\t\tposition: { x: 900, y: 80}, \n\t\t\tcurrentDirection: \"right\",\n\t\t\tvelocity: {\n\t\t\t\tx: -3,\n\t\t\t\ty: 2\n\t\t\t}\n\t\t}); \n\n\t\tlet initialArrowTwo = new FireArrow({\n\t\t\tposition: { x: 20, y: 80}, \n\t\t\tcurrentDirection: \"left\",\n\t\t\tvelocity: {\n\t\t\t\tx: 3,\n\t\t\t\ty: 2\n\t\t\t}\n\t\t});\n\n\t\tthis.inGameArrows.push(initialArrowOne);\n\t\tthis.inGameArrows.push(initialArrowTwo);\n\n\t\t//this.arrowInterval = setInterval(() => {\n\t\t//\tfor (let i = 0; i < this.arrow.length; i++) {\n\t\t//\tthis.arrow[i].draw(ctx);\n\t\t//\tthis.arrow[i].reset();\n\t\t//\t}\n\t\t//}, 2000)\n\t\t\n\t\t// Sets the background in the right spot (need to adjust this).\n\t\t//this.camera = new Camera({\n\t\t//\tposition: { \n\t\t//\t\tx: 0, \n\t\t//\t\ty: 0\n\t\t//\t}\n\t\t//})\n\t}\n\n\tanimate(ctx) {\n\t\t// Background (scaled to bottom left)\n\t\tctx.save(); // Saving context. Pushes current stack onto state. \n\t\tctx.scale(4, 4) // Enlarges  by 4 times on x and y axis\n\t\tctx.translate(-this.camera.position.x, -backgroundImage.image.height + scaledCanvas.height)\n\t\tbackgroundImage.draw(ctx);\n\t\tctx.restore();\n\t\n\t\t// Drawing Socerer and Castle Healthbars\n\t\t// Sorcerer must be drawn 2nd for fireball animation to be in front of castle. \n\t\tthis.castle.draw(ctx);\n\t\tthis.castle.healthbar.draw(ctx);\n\t\tthis.sorcerer.draw(ctx);\n\t\tthis.sorcerer.healthBar.draw(ctx);\n\n\t\t// Initial Arrow drawn begins moving. \n\t\tfor (let i = 0; i < this.arrow.length; i++) {\n\t\t\tthis.arrow[i].draw(ctx);\n\t\t}\n\t\t\n\t\t// Initial Socerer Velocity  \n\t\tthis.sorcerer.velocity.x = 0;\n\n\t\t// Increase velocity based on what's pressed\n\t\tif (acceptableKeys.d.pressed) {\n\t\t\tthis.sorcerer.velocity.x = 5;\n\t\t} else if (acceptableKeys.a.pressed) {\n\t\t\tthis.sorcerer.velocity.x = -5\n\t\t}\n\n\t\t// Collision Detection\n\t\tthis.isCollided();\n\n\t\tif (this.isVictory()) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (this.isGameOver(ctx)) {\n\t\t\treturn true; \n\t\t}\n\t}\n\n\tisOutOfBounds(pos) {\n\t\tlet xPos = pos[0]\n\t\tlet yPos = pos[y]\n\t\treturn (xPos < 0) || (xPos > 1024) || (yPos > 576)\n\t}\n\n\tisCollided() {\n\t\tlet sorcerer = this.sorcerer\n\t\tlet sorcererHitBox = sorcerer.hitboxDims();\n\t\tlet topLeft = sorcererHitBox.topLeft;\n\t\tlet topRight = sorcererHitBox.topRight;\n\t\tlet bottomRight = sorcererHitBox.bottomRight;\n\n\t\tfor (let i = 0; i < this.arrow.length; i++) {\n\t\t\tif (this.arrow[i].recentlyHit === false) {\n\t\t\t\tif ((this.arrow[i].hitbox.position.x > topLeft[0] && this.arrow[i].hitbox.position.x < topRight[0]) && (this.arrow[i].hitbox.position.y < bottomRight[1] && this.arrow[i].hitbox.position.y > topRight[1])) {\n\t\t\t\t\tthis.stopArrowDamage(i);\n\t\t\t\t\tthis.arrow[i].ifHit();\n\t\t\t\t\tsorcerer.health -= 10;\n\t\t\t\t\tthis.sorcerer.healthBar.decrease();\n\t\t\t\t\tthis.arrow.push(\n\t\t\t\t\t\tnew FireArrow(\n\t\t\t\t\t\t\trandomShootingPosition()), \n\t\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\ti++;\n\t\t}\n\t}\n\n\t// Feature not Implemented. \n\t//shouldPanCameraToTheRight() {\n\t//\tconst cameraboxRightSide = this.sorcerer.camerabox.position.x + this.sorcerer.camerabox.width;\n\n\t//\tif (cameraboxRightSide >= 1026) {\n\t//\t\tconsole.log(`Socerer Vel: ${this.sorcerer.velocity.x} Camera Vel: ${this.camera.position.x}`)\n\t//\t\tconsole.log(this.camera)\n\t//\t\tthis.camera.position.x += this.sorcerer.velocity.x\n\t//\t}\n\t//}\n\n\tstopArrowDamage(i) {\n\t\t\tthis.arrow[i].recentlyHit = true; \n\t\t\tthis.arrow.slice(i, 1)\n\t}\n\n\tisGameOver(ctx) {\n\t\tif (this.sorcerer.health < 1) {\n\t\t\tlet losingModal = document.getElementById(\"losing-modal\");\n\t\t\tlet losing_button = document.getElementById(\"losing_button\");\n\t\t\tclearInterval(this.arrowInterval);\n\t\t\tthis.gameStarted = false;\n\t\t\tlosing_button.addEventListener(\"click\", () => {\n\t\t\t\tlosingModal.style.display = \"none\";\n\t\t\t\tlocation.reload();\n\t\t\t})\n\t\t\tlosingModal.style.display = \"flex\";\n\t\t\treturn true;\n\t\t} \n\t}\n\n\tisVictory() {\n\t\tif (this.castle.health < 1) {\n\t\t\tlet winningModal = document.getElementById(\"winning-modal\")\n\t\t\tlet winning_button = document.getElementById(\"winning_button\")\n\t\t\tclearInterval(this.arrowInterval);\n\t\t\twinning_button.addEventListener(\"click\", () => {\n\t\t\t\twinningModal.style.display = \"none\";\n\t\t\t\tlocation.reload();\n\t\t\t})\n\t\t\t\n\t\t\tsetTimeout(() => {\n\t\t\twinningModal.style.display = \"flex\";\n\t\t\treturn true; \n\t\t}, 500)}\n\t}\n\n\tlockC() {\n\t\tif (!cLocked) {\n\t\t\tcLocked = true; \n\t\t\tsetTimeout(this.unlockC, 3000);\n\t\t} \n\t}\n\n\tunlockC() {\n\t\tcLocked = false;\n\t}\n}\n\n","export default class StillObject {\n\tconstructor(object) {\n\t\tthis.position = object.position;\n\t\tthis.image = new Image();\n\t\tthis.image.src = object.imageSrc;\n\t}\n\n\tdraw(ctx) {\n\t\tif (!this.image) return;\n\t\t\n\t\tctx.drawImage(this.image, this.position.x, this.position.y)\n\t}\n\n}","import Sorcerer from './scripts/sorcerer';\nimport Castle from './scripts/castle';\nimport Game from './scripts/game';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\tconst canvas = document.getElementById(\"canvas\");\n\tconst ctx = canvas.getContext(\"2d\");\n\tcanvas.height = 576; // Setting pixel height of canvas. \n\tcanvas.width = 1024; // Setting pixel width of canvas. \n\n\t// Starting Modal Variables\n\tconst startingModal = document.getElementById(\"starting-modal\")\n\tconst start_buttons = document.getElementsByClassName(\"start_button\")\n\tconst allModals = document.getElementsByClassName('modal')\n\n\t// Sound Variables \n\tconst muteButton = document.getElementById(\"soundbackground\");\n\tconst muteButtonImage = document.getElementById(\"sound_button\")\n\n\t// Main game, sorcerer, and castle variables. \n\tconst castle = new Castle({position: {x: 680, y: 480}});\n\t//const sorcerer = new Sorcerer({x: 180, y: 280});\n\tconst game = new Game(sorcerer, castle);\n\n\t// Sound - Introduction  variables. \n\tlet startingAudio = document.createElement(\"AUDIO\");\n\tstartingAudio.src = \"./assets/music/intro_music.mp3\"\n\tstartingAudio.loop = true; \n\tstartingAudio.autoplay = true; \n\tstartingAudio.muted = true;\n\tmuteButton.appendChild(startingAudio);\n\t\n\t// Game Started state flag. \n\tlet gameStarted = false;\n\n\t// Preloads the background. Setting the color of canvas to gray, etc.\n\t// Sound EL (start sound, mute and unmute). Default is muted. \n\tmuteButton.addEventListener(\"click\", () => {\n\t\tif (startingAudio.muted === false) {\n\t\t\tstartingAudio.muted = true;\n\t\t\tmuteButtonImage.style.backgroundImage = \"url('./assets/mute/mute.png')\"\n\t\t} else {\n\t\t\tstartingAudio.muted = false;\n\t\t\tstartingAudio.play();\n\t\t\tmuteButtonImage.style.backgroundImage = \"url('./assets/mute/sound_on.png')\"\n\t\t}\n\t\tmuteButton.appendChild(startingAudio);\n\t})\n\tfd;klsjfli;dsjajfkdjfkljdfd\n\n\t// Setting the start button on the starting Modal. \n\tfor (let i = 0; i < start_buttons.length; i++) {\n\t\tstart_buttons[i].addEventListener(\"click\", () => {\n\t\t\t// Once clicked the animate() loop will run and hide display. \n\t\t\tgameStarted = true;\n\t\t\tchangeDisplay(allModals);\n\t\t\tgame.start(ctx); \n\t\t\tanimate();\n\t})}\n\n\t// When this is called below, if started, the game animates. \n\tfunction animate() { \n\t\tif (gameStarted) {\n\t\t\t// If the game.animate() ever returns true, the game is over. \n\t\t\tconst gameFlag = game.animate(ctx);\n\t\t\tif (gameFlag) {\n\t\t\t\tgameStarted = false;\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tconsole.log(\"hello\")\n\t\t// Repeats the method inside it 60 times per second. \n\t\trequestAnimationFrame(animate);\n\n\t}\n});\n\nfunction changeDisplay(modals) {\n\tfor (let i = 0; i < modals.length; i++) {\n\t\tmodals[i].style.display = \"none\";\n\t}\n}\n\n"],"names":["Image","src","HealthBar","constructor","options","this","position","value","maxHealth","backgroundColor","innerSize","textPosition","draw","ctx","beginPath","rect","x","y","fillStyle","strokeStyle","stroke","fill","fillText","decrease","castleImg","Castle","width","height","health","healthbar","drawImage","drawHealthBar","currentframe","animationFrame","AnimatedObject","image","imageSrc","amountOfFrames","animate","Math","floor","FireArrow","super","velocity","hitbox","recentlyHit","currentDirection","lineWidth","moveTo","lineTo","updateHitBox","move","reset","generateRandomNumber","ifHit","setTimeout","max","min","random","Camera","obj","backgroundImage","object","acceptableKeys","d","pressed","a","space","c","cLocked","randomShootingPosition","arrowDirection","spawnHeight","xPosition","yPosition","Game","sorcerer","castle","inGameArrows","camera","gameStarted","window","addEventListener","e","key","moveRight","moveLeft","jump","lockC","cast","status","target","document","body","preventDefault","start","fillRect","canvas","save","scale","translate","restore","initialArrowOne","initialArrowTwo","push","healthBar","i","arrow","length","isCollided","isVictory","isGameOver","isOutOfBounds","pos","xPos","yPos","sorcererHitBox","hitboxDims","topLeft","topRight","bottomRight","stopArrowDamage","slice","losingModal","getElementById","losing_button","clearInterval","arrowInterval","style","display","location","reload","winningModal","winning_button","unlockC","changeDisplay","modals","getContext","start_buttons","getElementsByClassName","allModals","muteButton","muteButtonImage","game","startingAudio","createElement","loop","autoplay","muted","appendChild","play","fd","klsjfli","dsjajfkdjfkljdfd","console","log","requestAnimationFrame"],"sourceRoot":""}